
on:
  push:
    branches:
      - 'user/vikas'
  workflow_dispatch:
    inputs:
      BuildMode:
        description: 'Build Mode'
        default: 'test'
        required: true
        type: choice
        options:
         - test
         - prod
      VersionType:
       description: 'Version Type'
       default: 'minor'
       required: true
       type: choice
       options:
         - none
         - minor
         - major
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SP }}
    - name: Install Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install Python packages
      run: |
        pip install bumpversion
        pip install tox
        pip install twine
        sudo apt-get install gcc libpq-dev -y
        sudo apt-get install python-dev  python-pip -y
        sudo apt-get install python3-dev python3-pip python3-venv python3-wheel -y
        pip3 install wheel
      shell: bash
    - name: Update Version using bumpversion
      run: |
        echo "Build mode: ${{ github.event.inputs.BuildMode  }}"
        if [ "${{github.event.inputs.BuildMode  }}" = "prod" ]; then
                bumpversion "${{ github.event.inputs.VersionType  }}"
            else
                bumpversion "${{ github.event.inputs.VersionType  }}" --no-commit --no-tag --allow-dirty
            fi
      shell: bash
    - name: Update AIKey
      run: sed -i "/__AIkey__/c __AIkey__ = '${{ secrets.AIKEY }}'" ./iotedgedev/__init__.py
      shell: bash
    - name: Build wheel
      run: python setup.py bdist_wheel
      shell: bash
    - name: Revert AIKey to Original
      run: sed -i "/__AIkey__/c __AIkey__ = '${{ secrets.TEST_AIKEY }}'" ./iotedgedev/__init__.py
      shell: bash

    - name: 'Azure Key Vault: azure-iot-edgetools-kv'
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: "azure-iot-edgetools-kv"
        secrets: 'pypiusername,aziotedge,pypirepourl,acr_password'
      id: KeyVaultSecret
    - run: |
        VERSION=${{ env.cat ./iotedgedev/__init__.py | grep '__version__' | grep -oP "'\K[^']+" }}
        PYPI=$([ "${{ github.event.inputs.BuildMode  }}" = "prod" ] && echo "pypitest" || echo "pypitest")
        twine upload -r ${PYPI} "dist/iotedgedev-${VERSION}-py3-none-any.whl" -u "${{ steps.KeyVaultSecret.outputs.pypiusername }}" -p "${{ steps.KeyVaultSecret.outputs.aziotedge }}" --repository-url "${{ steps.KeyVaultSecret.outputs.pypirepourl }}"
      shell: bash
    - uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: 
        prerelease: true
    - uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Verify wheel
      run: pip install --upgrade iotedgedev && iotedgedev --version
      shell: bash
    - name: Buld Docker image
      run: |
        cd docker/tool
        ./build-docker.sh iotedgetoolscontainerregistry.azurecr.io/public/iotedge/iotedgedev linux
      shell: bash
    - name: Test local Docker image
      run: |
        VERSION=${{ env.cat ./iotedgedev/__init__.py | grep '__version__' | grep -oP "'\K[^']+" }}
        mkdir /mnt/iotedge
        docker run -ti -v /var/run/docker.sock:/var/run/docker.sock -v /mnt/iotedge:/home/iotedge iotedgetoolscontainerregistry.azurecr.io/public/iotedge/iotedgedev:${VERSION}
      shell: bash
    - name: Push docker image to acr
      run: |
        VERSION=${{ cat ../../iotedgedev/__init__.py | grep '__version__' | grep -oP "'\K[^']+" }}
        docker login iotedgetoolscontainerregistry.azurecr.io -u IotEdgeToolsContainerRegistry -p ${{ steps.KeyVaultSecret.outputs.acr_password }}
        ./push-docker.sh ${VERSION}
      shell: bash
      if: (success() && startsWith(github.ref, 'refs/tags/'))
    - name: Test last uploaded Docker image
      run: |
        docker pull mcr.microsoft.com/iotedge/iotedgedev
        docker run -ti --rmâ€¯ mcr.microsoft.com/iotedge/iotedgedev 
        iotedgedev --version
      shell: bash
      if: (success() && startsWith(github.ref, 'refs/tags/'))
